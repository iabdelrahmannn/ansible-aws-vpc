---
- name: stack setup
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    # ===== import vars =====
    - name: Import vpc setup variables
      include_vars:
        file: vars/output_vars

    - name: Import ec2 setup variables
      include_vars:
        file: vars/stacksetup

    # ===== key pair =====
    - name: create a new EC2 key pair
      amazon.aws.ec2_key:
        name: vpro-key
        region: "{{region}}"
      register: vprokey_out

    - name: save private key into file loginkey_vpro.pem
      copy:
        content: "{{vprokey_out.key.private_key}}"
        dest: "./loginkey_vpro.pem"
        mode: "0600"
      when: vprokey_out.changed

    # ===== security groups =====
    - name: create SG for LB
      amazon.aws.ec2_security_group:
        name: SG_ELB
        region: "{{region}}"
        description: allow port 80 from everywhere
        vpc_id: "{{vpcid}}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
      register: SGELB_out

    - name: create SG for ec2
      amazon.aws.ec2_security_group:
        name: SG_EC2
        region: "{{region}}"
        description: allow port 22 from everywhere
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{SGELB_out.group_id}}"
            rule_desc: allow all on port 80
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{bastionsg_out}}"
      register: SGEC2_out

    - name: update SG with its own sg id
      amazon.aws.ec2_security_group:
        name: SG_EC2
        region: "{{region}}"
        description: allow port 22 from everywhere
        vpc_id: "{{vpcid}}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{SGEC2_out.group_id}}"

    # ===== instances (use subnet_id + security_groups) =====
    - name: create nginix web01
      amazon.aws.ec2_instance:
        name: "web-01-nginix"
        key_name: vpro-key
        instance_type: t2.micro
        region: "{{region}}"
        subnet_id: "{{privsub4id}}"
        exact_count: 1
        security_groups:
          - SG_EC2
        wait: yes
        wait_timeout: 300
        image_id: "{{nginx_ami}}"
        tags:
          name: web-01-nginix
          project: vprofile
          owner: devops team
      register: web01_out

    - name: create tomcat app01
      amazon.aws.ec2_instance:
        name: "app-01-tomcat"
        key_name: vpro-key
        instance_type: t2.micro
        region: "{{region}}"
        subnet_id: "{{privsub4id}}"
        exact_count: 1
        security_groups:
          - SG_EC2
        wait: yes
        wait_timeout: 300
        image_id: "{{tomcat_ami}}"
        tags:
          name: app-01-tomcat
          project: vprofile
          owner: devops team
      register: app01_out

    - name: create memcache mc01
      amazon.aws.ec2_instance:
        name: "mc-01-memcache"
        key_name: vpro-key
        instance_type: t2.micro
        region: "{{region}}"
        subnet_id: "{{privsub4id}}"
        exact_count: 1
        security_groups:
          - SG_EC2
        wait: yes
        wait_timeout: 300
        image_id: "{{memcache_ami}}"
        tags:
          name: mc-01-memcache
          project: vprofile
          owner: devops team
      register: mc01_out

    - name: create rabbitmq rbq01
      amazon.aws.ec2_instance:
        name: "rbq-01-rabbitmq"
        key_name: vpro-key
        instance_type: t2.micro
        region: "{{region}}"
        subnet_id: "{{privsub4id}}"
        exact_count: 1
        security_groups:
          - SG_EC2
        wait: yes
        wait_timeout: 300
        image_id: "{{rmq_ami}}"
        tags:
          name: rbq-01-rabbitmq
          project: vprofile
          owner: devops team
      register: rbq01_out

    - name: create mysql db01
      amazon.aws.ec2_instance:
        name: "db-01-mysql"
        key_name: vpro-key
        instance_type: t2.micro
        region: "{{region}}"
        subnet_id: "{{privsub4id}}"
        exact_count: 1
        security_groups:
          - SG_EC2
        wait: yes
        wait_timeout: 300
        image_id: "{{mysql_ami}}"
        tags:
          name: db-01-mysql
          project: vprofile
          owner: devops team
      register: db01_out

    # ===== ELB (classic) =====
    - name: create classic ELB
      amazon.aws.ec2_elb_lb:
        name: vprofile-elb
        region: "{{ region }}"
        state: present
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        security_group_ids:
          - "{{ SGELB_out.group_id }}"
        instance_ids:
          - "{{ web01_out.instance_ids[0] }}"
        purge_instance_ids: true
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    # ===== write helper files (use returned instance data) =====
    - name: write provision-stack/group_vars/hostsip
      blockinfile:
        path: provision-stack/group_vars/hostsip
        create: true
        block: |
          web01_ip: {{ web01_out.instances[0].private_ip_address }}
          app01_ip: {{ app01_out.instances[0].private_ip_address }}
          rmq01_ip: {{ rbq01_out.instances[0].private_ip_address }}
          mc01_ip:  {{ mc01_out.instances[0].private_ip_address }}
          db01_ip:  {{ db01_out.instances[0].private_ip_address }}

    - name: copy login key to provision_stack directory
      copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: "0400"

    - name: write provision-stack/inventory-vpro
      blockinfile:
        path: provision-stack/inventory-vpro
        create: true
        block: |
          web01 ansible_host={{ web01_out.instances[0].private_ip_address }}
          app01 ansible_host={{ app01_out.instances[0].private_ip_address }}
          rmq01 ansible_host={{ rbq01_out.instances[0].private_ip_address }}
          mc01  ansible_host={{ mc01_out.instances[0].private_ip_address }}
          db01  ansible_host={{ db01_out.instances[0].private_ip_address }}
          Ansible-vm ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
