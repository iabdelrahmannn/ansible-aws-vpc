---
- name: stack setup
  hosts: localhost
  connection: local
  gather_facts: false

  tasks:
    # ===== vars =====
    - name: Import VPC/output vars
      ansible.builtin.include_vars:
        file: vars/output_vars

    - name: Import EC2 stack vars
      ansible.builtin.include_vars:
        file: vars/stacksetup

    # ===== key pair =====
    - name: create a new EC2 key pair
      amazon.aws.ec2_key:
        name: vpro-key
        region: "{{ region }}"
      register: vprokey_out

    - name: save private key into file loginkey_vpro.pem
      ansible.builtin.copy:
        content: "{{ vprokey_out.key.private_key }}"
        dest: "./loginkey_vpro.pem"
        mode: "0600"
      when: vprokey_out.changed

    # ===== security groups =====
    - name: create SG for LB
      amazon.aws.ec2_security_group:
        name: SG_ELB
        region: "{{ region }}"
        description: allow port 80 from everywhere
        vpc_id: "{{ vpcid }}"
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            cidr_ip: 0.0.0.0/0
            rule_desc: allow all on port 80
      register: SGELB_out

    - name: create SG for EC2
      amazon.aws.ec2_security_group:
        name: SG_EC2
        region: "{{ region }}"
        description: allow port 22 from everywhere
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: tcp
            from_port: 80
            to_port: 80
            group_id: "{{ SGELB_out.group_id }}"
            rule_desc: allow all on port 80
          - proto: tcp
            from_port: 22
            to_port: 22
            group_id: "{{ bastionsg_out }}"
      register: SGEC2_out

    - name: update SG with its own sg id
      amazon.aws.ec2_security_group:
        name: SG_EC2
        region: "{{ region }}"
        description: allow port 22 from everywhere
        vpc_id: "{{ vpcid }}"
        purge_rules: no
        rules:
          - proto: all
            group_id: "{{ SGEC2_out.group_id }}"

    # ===== instances =====
    - name: create nginx web01
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: vpro-key
        image_id: "{{ nginx_ami }}"
        instance_type: t2.micro
        vpc_subnet_id: "{{ privsub4id }}"
        security_group_ids:
          - "{{ SGEC2_out.group_id }}"
        count: 1
        wait: true
        wait_timeout: 300
        tags:
          Name: web-01-nginx
          project: vprofile
          Owner: devops team
      register: web01_out

    - name: create tomcat app01
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: vpro-key
        image_id: "{{ tomcat_ami }}"
        instance_type: t2.micro
        vpc_subnet_id: "{{ privsub4id }}"
        security_group_ids:
          - "{{ SGEC2_out.group_id }}"
        count: 1
        wait: true
        wait_timeout: 300
        tags:
          Name: app-01-tomcat
          project: vprofile
          Owner: devops team
      register: app01_out

    - name: create memcache mc01
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: vpro-key
        image_id: "{{ memcache_ami }}"
        instance_type: t2.micro
        vpc_subnet_id: "{{ privsub4id }}"
        security_group_ids:
          - "{{ SGEC2_out.group_id }}"
        count: 1
        wait: true
        wait_timeout: 300
        tags:
          Name: mc-01-memcache
          project: vprofile
          Owner: devops team
      register: mc01_out

    - name: create rabbitmq rbq01
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: vpro-key
        image_id: "{{ rmq_ami }}"
        instance_type: t2.micro
        vpc_subnet_id: "{{ privsub4id }}"
        security_group_ids:
          - "{{ SGEC2_out.group_id }}"
        count: 1
        wait: true
        wait_timeout: 300
        tags:
          Name: rbq-01-rabbitmq
          project: vprofile
          Owner: devops team
      register: rbq01_out

    - name: create mysql db01
      amazon.aws.ec2_instance:
        region: "{{ region }}"
        key_name: vpro-key
        image_id: "{{ mysql_ami }}"
        instance_type: t2.micro
        vpc_subnet_id: "{{ privsub4id }}"
        security_group_ids:
          - "{{ SGEC2_out.group_id }}"
        count: 1
        wait: true
        wait_timeout: 300
        tags:
          Name: db-01-mysql
          project: vprofile
          Owner: devops team
      register: db01_out

    # ===== collect IPs =====
    - name: collect private IPs
      ansible.builtin.set_fact:
        web01_ip: "{{ web01_out.instances[0].private_ip_address }}"
        app01_ip: "{{ app01_out.instances[0].private_ip_address }}"
        rmq01_ip: "{{ rbq01_out.instances[0].private_ip_address }}"
        mc01_ip:  "{{ mc01_out.instances[0].private_ip_address }}"
        db01_ip:  "{{ db01_out.instances[0].private_ip_address }}"

    # ===== Classic ELB =====
    - name: create classic ELB
      amazon.aws.ec2_elb_lb:
        name: vprofile-elb
        region: "{{ region }}"
        state: present
        subnets:
          - "{{ pubsub1id }}"
          - "{{ pubsub2id }}"
          - "{{ pubsub3id }}"
        security_group_ids:
          - "{{ SGELB_out.group_id }}"
        instance_ids:
          - "{{ web01_out.instance_ids[0] }}"
        purge_instance_ids: true
        listeners:
          - protocol: http
            load_balancer_port: 80
            instance_port: 80

    # ===== persist hosts and inventory =====
    - name: write provision-stack/group_vars/hostsip
      ansible.builtin.blockinfile:
        path: provision-stack/group_vars/hostsip
        create: true
        block: |
          web01_ip: {{ web01_ip }}
          app01_ip: {{ app01_ip }}
          rmq01_ip: {{ rmq01_ip }}
          mc01_ip:  {{ mc01_ip }}
          db01_ip:  {{ db01_ip }}

    - name: copy login key to provision-stack
      ansible.builtin.copy:
        src: loginkey_vpro.pem
        dest: provision-stack/loginkey_vpro.pem
        mode: "0400"

    - name: write provision-stack/inventory-vpro
      ansible.builtin.blockinfile:
        path: provision-stack/inventory-vpro
        create: true
        block: |
          web01 ansible_host={{ web01_ip }}
          app01 ansible_host={{ app01_ip }}
          rmq01 ansible_host={{ rmq01_ip }}
          mc01  ansible_host={{ mc01_ip }}
          db01  ansible_host={{ db01_ip }}
          Ansible-vm ansible_host=127.0.0.1 ansible_connection=local

          [websrvgrp]
          web01

          [appsrvgrp]
          app01

          [rmqsrvgrp]
          rmq01

          [mcsrvgrp]
          mc01

          [dbsrvgrp]
          db01

          [control]
          cntl

          [stack_inst:children]
          websrvgrp
          appsrvgrp
          rmqsrvgrp
          mcsrvgrp
          dbsrvgrp

          [stack_inst:vars]
          ansible_user=ubuntu
          ansible_ssh_private_key_file=loginkey_vpro.pem
